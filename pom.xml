<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.tjake.jlama</groupId>
  <artifactId>jlama</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>Jlama</name>
  <url>https://github.com/tjake/jlama</url>
  <packaging>jar</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <osmaven.version>1.7.1</osmaven.version>
    <!-- keep in sync with PlatformDependent#ALLOWED_LINUX_OS_CLASSIFIERS -->
    <os.detection.classifierWithLikes>fedora,suse,arch</os.detection.classifierWithLikes>
    <jni.classifier>${os.detected.name}-${os.detected.arch}</jni.classifier>
    <exe.make>make</exe.make>
    <exe.compiler>gcc</exe.compiler>
    <exe.archiver>ld</exe.archiver>
    <nativeLibName>libjlamav</nativeLibName>
    <nativeIncludeDir>${project.basedir}/src/main/c</nativeIncludeDir>
    <nativeJarWorkdir>${project.build.directory}/native-jar-work</nativeJarWorkdir>
    <nativeObjsOnlyDir>${project.build.directory}/native-objs-only</nativeObjsOnlyDir>
    <nativeLibOnlyDir>${project.build.directory}/native-lib-only</nativeLibOnlyDir>
    <defaultJarFile>${project.build.directory}/${project.build.finalName}.jar</defaultJarFile>
    <nativeJarFile>${project.build.directory}/${project.build.finalName}-${jni.classifier}.jar</nativeJarFile>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.2</version>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>32.0.1-jre</version>
    </dependency>

    <dependency>
      <groupId>ai.djl.huggingface</groupId>
      <artifactId>tokenizers</artifactId>
      <version>0.22.1</version>
    </dependency>

    <dependency>
      <groupId>ai.djl.sentencepiece</groupId>
      <artifactId>sentencepiece</artifactId>
      <version>0.23.0</version>
    </dependency>

    <dependency>
      <groupId>org.jctools</groupId>
      <artifactId>jctools-core</artifactId>
      <version>4.0.1</version>
    </dependency>

    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>4.7.5</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.4.8</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>1.35</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <version>1.35</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
      <extensions>
        <extension>
          <groupId>kr.motd.maven</groupId>
          <artifactId>os-maven-plugin</artifactId>
          <version>${osmaven.version}</version>
        </extension>
      </extensions>
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
          <configuration>
            <source>21</source>
            <target>21</target>
            <compilerArgs>
              <arg>--add-modules=jdk.incubator.vector</arg>
              <arg>--add-exports</arg>
              <arg>java.base/sun.nio.ch=ALL-UNNAMED</arg>
              <arg>--add-exports</arg>
              <arg>java.base/jdk.internal.vm.vector=ALL-UNNAMED</arg>
              <arg>--enable-preview</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
          <configuration>
            <forkCount>1</forkCount>
            <argLine>
              --add-modules=jdk.incubator.vector
              --add-exports java.base/sun.nio.ch=ALL-UNNAMED
              --enable-preview
              --enable-native-access=ALL-UNNAMED
              --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED
              -Djava.library.path=target/native-lib-only
            </argLine>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
          <executions>
            <execution>
              <goals>
                <goal>test-jar</goal>
              </goals>
              <configuration>
                <archive>
                  <manifest>
                    <addClasspath>true</addClasspath>
                    <mainClass>org.openjdk.jmh.Main</mainClass>
                  </manifest>
                </archive>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>3.6.0</version>
          <configuration>
            <descriptors>
              <descriptor>src/main/assembly/test-jar-with-dependencies.xml</descriptor>
            </descriptors>
          </configuration>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
              <configuration>
              <archive>
                <manifest>
                  <mainClass>org.openjdk.jmh.Main</mainClass>
                </manifest>
              </archive>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.4.1</version>
          <executions>
            <execution>
              <id>shade-cli</id>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <outputFile>${project.basedir}/target/jlama-cli.jar</outputFile>
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <mainClass>com.github.tjake.jlama.cli.JlamaCli</mainClass>
                  </transformer>
                </transformers>
                <filters>
                  <filter>
                    <!--
                        Shading signed JARs will fail without this.
                        http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                    -->
                    <artifact>*:*</artifact>
                    <excludes>
                      <exclude>META-INF/*.SF</exclude>
                      <exclude>META-INF/*.DSA</exclude>
                      <exclude>META-INF/*.RSA</exclude>
                    </excludes>
                  </filter>
                </filters>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.10</version>
          <executions>
            <execution>
              <id>parse-version</id>
              <goals>
                <goal>parse-version</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Ensure to put maven-antrun-plugin at the end of the plugin list
     so that they are run lastly in the same phase. -->
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>1.8</version>
          <executions>
            <!-- Generate the version properties for all artifacts. -->
            <execution>
              <id>write-version-properties</id>
              <phase>initialize</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <tasks>
                  <taskdef resource="net/sf/antcontrib/antlib.xml" />

                  <!-- Get the information about the latest commit -->
                  <exec executable="git" outputproperty="gitOutput.lastCommit" resultproperty="gitExitCode.lastCommit" failonerror="false" failifexecutionfails="false">
                    <arg value="log" />
                    <arg value="-1" />
                    <arg value="--format=format:%h %H %cd" />
                    <arg value="--date=iso" />
                  </exec>
                  <propertyregex property="shortCommitHash" input="${gitOutput.lastCommit}" regexp="^([0-9a-f]+) .*$" select="\1" casesensitive="true" defaultValue="0" />
                  <propertyregex property="longCommitHash" input="${gitOutput.lastCommit}" regexp="^[0-9a-f]+ ([0-9a-f]{40}) .*$" select="\1" casesensitive="true" defaultValue="0000000000000000000000000000000000000000" />
                  <propertyregex property="commitDate" input="${gitOutput.lastCommit}" regexp="^[0-9a-f]+ [0-9a-f]{40} (.*)$" select="\1" casesensitive="true" defaultValue="1970-01-01 00:00:00 +0000" />

                  <!-- Get the information abount whether the repository is clean or dirty -->
                  <exec executable="git" outputproperty="gitOutput.repoStatus" resultproperty="gitExitCode.repoStatus" failonerror="false" failifexecutionfails="false">
                    <arg value="status" />
                    <arg value="--porcelain" />
                  </exec>
                  <if>
                    <equals arg2="0" arg1="${gitExitCode.repoStatus}" />
                    <then>
                      <if>
                        <equals arg2="" arg1="${gitOutput.repoStatus}" />
                        <then>
                          <property name="repoStatus" value="clean" />
                        </then>
                        <else>
                          <property name="repoStatus" value="dirty" />
                        </else>
                      </if>
                    </then>
                    <else>
                      <property name="repoStatus" value="unknown" />
                    </else>
                  </if>

                  <!-- Print the obtained commit information. -->
                  <echo>Current commit: ${shortCommitHash} on ${commitDate}</echo>

                  <!-- Generate the .properties file. -->
                  <!--
                  <property name="metaInfDir" value="${project.basedir}/src/main/resources/META-INF" />
                  -->
                  <property name="metaInfDir" value="${project.build.outputDirectory}/META-INF" />
                  <property name="versionPropFile" value="${metaInfDir}/${project.groupId}.versions.properties" />
                  <mkdir dir="${metaInfDir}" />
                  <delete file="${versionPropFile}" quiet="true" />

                  <propertyfile file="${versionPropFile}" comment="Generated by jlama/pom.xml">
                    <entry key="${project.artifactId}.version" value="${project.version}" />
                    <entry key="${project.artifactId}.buildDate" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss Z" />
                    <entry key="${project.artifactId}.commitDate" value="${commitDate}" />
                    <entry key="${project.artifactId}.shortCommitHash" value="${shortCommitHash}" />
                    <entry key="${project.artifactId}.longCommitHash" value="${longCommitHash}" />
                    <entry key="${project.artifactId}.repoStatus" value="${repoStatus}" />
                  </propertyfile>
                </tasks>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>org.apache.ant</groupId>
              <artifactId>ant</artifactId>
              <version>1.10.11</version>
            </dependency>
            <dependency>
              <groupId>org.apache.ant</groupId>
              <artifactId>ant-launcher</artifactId>
              <version>1.9.7</version>
            </dependency>
            <dependency>
              <groupId>ant-contrib</groupId>
              <artifactId>ant-contrib</artifactId>
              <version>1.0b3</version>
              <exclusions>
                <exclusion>
                  <groupId>ant</groupId>
                  <artifactId>ant</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
  </build>
  <profiles>
    <profile>
    <id>linux</id>
    <activation>
      <os>
        <family>skip</family>
      </os>
    </activation>
    <properties>
      <jni.platform>linux</jni.platform>
    </properties>
    <build>
    <plugins>
    <plugin>
    <artifactId>maven-antrun-plugin</artifactId>
    <executions>
    <!-- Build the additional JAR that contains the native library. -->
    <execution>
      <id>native-jar</id>
      <phase>package</phase>
      <goals>
        <goal>run</goal>
      </goals>
      <configuration>
        <target>
          <copy todir="${nativeJarWorkdir}">
            <zipfileset src="${defaultJarFile}" />
          </copy>
          <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
            <zipfileset dir="${nativeLibOnlyDir}" />
            <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/lib/\1" />
          </copy>
          <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
            <zipfileset dir="${nativeIncludeDir}" />
            <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+).h$" to="META-INF/native/include/\1.h" />
          </copy>
          <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
          <attachartifact file="${nativeJarFile}" classifier="${jni.classifier}" type="jar" />
        </target>
      </configuration>
    </execution>
    <!-- invoke the make file to build a static library -->
    <execution>
    <id>build-native-lib</id>
    <phase>generate-sources</phase>
    <goals>
      <goal>run</goal>
    </goals>
    <configuration>
      <target>
        <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
          <env key="CC" value="${exe.compiler}" />
          <env key="AR" value="${exe.archiver}" />
          <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
          <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
          <env key="JNI_PLATFORM" value="${jni.platform}" />
          <env key="CFLAGS" value="-O3 -march=native -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable" />
          <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
          <env key="LIB_NAME" value="${nativeLibName}" />
          <env KEY="LIB_EXT"  value="so" />
        </exec>
      </target>
    </configuration>
    </execution>
    </executions>
    </plugin>
    </plugins>
    </build>
    </profile>
  </profiles>
</project>
