// Generated by jextract

package com.github.tjake.jlama.math.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$0 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$0() {}
    static final FunctionDescriptor dot_product$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle dot_product$MH = RuntimeHelper.downcallHandle(
        "dot_product",
        constants$0.dot_product$FUNC
    );
    static final FunctionDescriptor accumulate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle accumulate$MH = RuntimeHelper.downcallHandle(
        "accumulate",
        constants$0.accumulate$FUNC
    );
    static final FunctionDescriptor saxpy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle saxpy$MH = RuntimeHelper.downcallHandle(
        "saxpy",
        constants$0.saxpy$FUNC
    );
    static final FunctionDescriptor scale$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scale$MH = RuntimeHelper.downcallHandle(
        "scale",
        constants$0.scale$FUNC
    );
    static final FunctionDescriptor debug$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle debug$MH = RuntimeHelper.downcallHandle(
        "debug",
        constants$0.debug$FUNC
    );
}


